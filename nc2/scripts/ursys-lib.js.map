{
  "version": 3,
  "sources": ["../common/declare-console.js", "../common/prompts.js", "../browser-client/@client.ts"],
  "sourcesContent": ["/*///////////////////////////////// ABOUT \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\*\\\n\n  Console colors for both browser and terminal environments\n\n\\*\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ * /////////////////////////////////////*/\n\n/* added for pull request #81 so 'npm run lint' test appears clean */\n/* eslint-disable no-unused-vars */\n\n/// COLORS BY NAME ////////////////////////////////////////////////////////////\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\nconst COLOR_NAMES = [\n  'Black',\n  'White',\n  'Red',\n  'Orange',\n  'Yellow',\n  'Green',\n  'Cyan',\n  'Blue',\n  'Purple',\n  'Pink',\n  'Gray'\n];\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\nconst TERM_COLORS = {\n  // TOUT = makeTerminalOut(str); TOUT('hi')\n  Reset: '\\x1b[0m',\n  Bright: '\\x1b[1m',\n  Dim: '\\x1b[2m',\n  Underscore: '\\x1b[4m',\n  Blink: '\\x1b[5m',\n  Reverse: '\\x1b[7m',\n  Hidden: '\\x1b[8m',\n  //\n  Black: '\\x1b[30m',\n  White: '\\x1b[37m',\n  Red: '\\x1b[31m',\n  Orange: '\\x1b[38;5;202m',\n  Yellow: '\\x1b[33m',\n  Green: '\\x1b[32m',\n  Cyan: '\\x1b[36m',\n  Blue: '\\x1b[34m',\n  Purple: '\\x1b[35m',\n  //\n  BgBlack: '\\x1b[40m',\n  BgGray: '\\x1b[100m',\n  BgWhite: '\\x1b[47m',\n  BgRed: '\\x1b[41m',\n  BgOrange: '\\x1b[48;5;202m',\n  BgYellow: '\\x1b[43m',\n  BgCyan: '\\x1b[46m',\n  BgGreen: '\\x1b[42m',\n  BgBlue: '\\x1b[44m',\n  BgPurple: '\\x1b[45m',\n  BgPink: '\\x1b[105m',\n\n  // FORMATS\n  TagBlack: '\\x1b[30;1m',\n  TagWhite: '\\x1b[37;1m',\n  TagRed: '\\x1b[41;37m',\n  TagOrange: '\\x1b[43;37m',\n  TagYellow: '\\x1b[43;30m',\n  TagGreen: '\\x1b[42;30m',\n  TagCyan: '\\x1b[46;37m',\n  TagBlue: '\\x1b[44;37m',\n  TagPurple: '\\x1b[45;37m',\n  TagPink: '\\x1b[105;1m',\n  TagGray: '\\x1b[100;37m',\n  TagNull: '\\x1b[2;37m'\n};\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\nconst CSS_COMMON = 'padding:3px 5px;border-radius:2px;';\nconst CSS_COLORS = {\n  Reset: 'color:auto;background-color:auto',\n  // COLOR FOREGROUND\n  Black: 'color:black',\n  White: 'color:white',\n  Red: 'color:red',\n  Orange: 'color:orange',\n  Yellow: 'color:orange',\n  Green: 'color:green',\n  Cyan: 'color:cyan',\n  Blue: 'color:blue',\n  Magenta: 'color:magenta',\n  Pink: 'color:pink',\n  // COLOR BACKGROUND\n  TagRed: `color:#000;background-color:#f66;${CSS_COMMON}`,\n  TagOrange: `color:#000;background-color:#fa4;${CSS_COMMON}`,\n  TagYellow: `color:#000;background-color:#fd4;${CSS_COMMON}`,\n  TagGreen: `color:#000;background-color:#5c8;${CSS_COMMON}`,\n  TagCyan: `color:#000;background-color:#2dd;${CSS_COMMON}`,\n  TagBlue: `color:#000;background-color:#2bf;${CSS_COMMON}`,\n  TagPurple: `color:#000;background-color:#b6f;${CSS_COMMON}`,\n  TagPink: `color:#000;background-color:#f9f;${CSS_COMMON}`,\n  TagGray: `color:#fff;background-color:#999;${CSS_COMMON}`,\n  TagNull: `color:#999;border:1px solid #ddd;${CSS_COMMON}`,\n  // COLOR BACKGROUND DARK (BROWSER ONLY)\n  TagDkRed: `color:white;background-color:maroon;${CSS_COMMON}`,\n  TagDkOrange: `color:white;background-color:burntorange;${CSS_COMMON}`,\n  TagDkYellow: `color:white;background-color:brown;${CSS_COMMON}`,\n  TagDkGreen: `color:white;background-color:forestgreen;${CSS_COMMON}`,\n  TagDkCyan: `color:white;background-color:cerulean;${CSS_COMMON}`,\n  TagDkBlue: `color:white;background-color:darkblue;${CSS_COMMON}`,\n  TagDkPurple: `color:white;background-color:indigo;${CSS_COMMON}`,\n  TagDkPink: `color:white;background-color:fuchsia;${CSS_COMMON}`\n};\n\n/// COLORS BY MEANING /////////////////////////////////////////////////////////\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\nconst SEMANTIC_FORMATS = [\n  'Build',\n  'Error',\n  'Alert',\n  'Test',\n  // system startup and components\n  'System',\n  'Server',\n  'Database',\n  'Network',\n  // urnet framework\n  'UR',\n  'URNET',\n  'URMOD',\n  // application\n  'AppMain',\n  'AppModule',\n  'AppState',\n  'AppCore',\n  'DataCore',\n  // user interface\n  'UI',\n  // events\n  'Phase',\n  'Event',\n  'Stream'\n];\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\nTERM_COLORS.TagBuild = TERM_COLORS.TagGray;\nTERM_COLORS.TagError = TERM_COLORS.TagRed;\nTERM_COLORS.TagAlert = TERM_COLORS.TagOrange;\nTERM_COLORS.TagTest = TERM_COLORS.TagRed;\n//\nTERM_COLORS.TagSystem = TERM_COLORS.TagGray;\nTERM_COLORS.TagServer = TERM_COLORS.TagGray;\nTERM_COLORS.TagDatabase = TERM_COLORS.TagCyan;\nTERM_COLORS.TagNetwork = TERM_COLORS.TagCyan;\n//\nTERM_COLORS.TagUR = TERM_COLORS.TagBlue;\nTERM_COLORS.TagURNET = TERM_COLORS.TagBlue;\nTERM_COLORS.TagURMOD = TERM_COLORS.TagBlue;\n//\nTERM_COLORS.TagAppMain = TERM_COLORS.TagGreen;\nTERM_COLORS.TagAppModule = TERM_COLORS.TagGreen;\nTERM_COLORS.TagAppState = TERM_COLORS.TagGreen;\nTERM_COLORS.TagAppCore = TERM_COLORS.TagGreen;\nTERM_COLORS.TagDataCore = TERM_COLORS.TagGreen;\n//\nTERM_COLORS.TagUI = TERM_COLORS.TagPurple;\n//\nTERM_COLORS.TagPhase = TERM_COLORS.TagPink;\nTERM_COLORS.TagEvent = TERM_COLORS.TagPink;\nTERM_COLORS.TagStream = TERM_COLORS.TagPink;\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\nCSS_COLORS.TagDebug = `color:#fff;background-color:IndianRed;${CSS_COMMON}`;\nCSS_COLORS.TagWarning = `color:#fff;background:linear-gradient(\n  -45deg,\n  rgb(29,161,242),\n  rgb(184,107,107),\n  rgb(76,158,135)\n);${CSS_COMMON}`;\nCSS_COLORS.TagTest = CSS_COLORS.TagRed;\n//\nCSS_COLORS.TagSystem = CSS_COLORS.TagGray;\nCSS_COLORS.TagServer = CSS_COLORS.TagGray;\nCSS_COLORS.TagDatabase = CSS_COLORS.TagCyan;\nCSS_COLORS.TagNetwork = CSS_COLORS.TagCyan;\n//\nCSS_COLORS.TagUR = `color:CornflowerBlue;border:1px solid CornflowerBlue;${CSS_COMMON}`;\nCSS_COLORS.TagURNET = `color:#fff;background-color:MediumSlateBlue;${CSS_COMMON}`;\nCSS_COLORS.TagURMOD = `color:#fff;background:linear-gradient(\n  -45deg,\n  CornflowerBlue 0%,\n  LightSkyBlue 25%,\n  RoyalBlue 100%\n);${CSS_COMMON}`;\nCSS_COLORS.TagAppMain = CSS_COLORS.TagGreen;\nCSS_COLORS.TagAppModule = CSS_COLORS.TagGreen;\nCSS_COLORS.TagAppState = `color:#fff;background-color:Navy;${CSS_COMMON}`;\nCSS_COLORS.TagUI = CSS_COLORS.TagDkOrange;\nCSS_COLORS.TagEvent = CSS_COLORS.TagDkOrange;\nCSS_COLORS.TagStream = CSS_COLORS.TagDkOrange;\nCSS_COLORS.TagPhase = `color:#fff;background-color:MediumVioletRed;${CSS_COMMON}`;\n\n/// EXPORTS ///////////////////////////////////////////////////////////////////\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\nmodule.exports = {\n  TERM_COLORS,\n  CSS_COLORS\n};\n", "/*///////////////////////////////// ABOUT \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\*\\\n\n  ANSI TERMINAL color codes and utilities\n\n\\*\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ * /////////////////////////////////////*/\n\n/* added for pull request #81 so 'npm run lint' test appears clean */\n/* eslint-disable no-unused-vars */\n\nconst IS_NODE = typeof window === 'undefined';\nconst IS_MOBILE =\n  !IS_NODE &&\n  /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(\n    navigator.userAgent\n  );\nconst D_CONSOLE = require('./declare-console.js');\nconst { TERM_COLORS, CSS_COLORS } = D_CONSOLE;\n\nconst DEFAULT_PADDING = IS_NODE\n  ? 10 // nodejs\n  : 8; // not nodejs\nconst DEFAULT_SPACE = IS_NODE\n  ? ' '.padStart(DEFAULT_PADDING, ' ')\n  : ' '.padStart(DEFAULT_PADDING + 4, ' ');\n\nconst DEFAULT_COLOR = 'TagNull';\n\n// div console\nconst HTCONSOLES = {};\n\n/// OUTPUT CONTROL ////////////////////////////////////////////////////////////\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n/** define\n */\nconst SHOW = true;\nconst HIDE = false;\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\nconst PROMPT_DICT = {\n  // URSYS-RELATED MODULES\n  'UR': [SHOW, 'TagRed'],\n  // SERVERS\n  'APPSRV': [SHOW, 'Yellow'],\n  'GEMSRV': [SHOW, 'Yellow'],\n  // SPECIAL\n  '-': [SHOW, 'TagNull']\n};\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n/** Pad string to fixed length, with default padding depending on\n *  whether the environment is node or browser\n */\nfunction padString(str, padding = DEFAULT_PADDING) {\n  let len = str.length;\n  const nbsp = String.fromCharCode(0x00a0); // unicode non-break space\n  if (IS_NODE) return `${str.padEnd(padding, ' ')}`;\n  // must be non-node environment, so do dynamic string adjust\n  if (padding === 0) return `${str}`;\n  // if this far, then we're truncating\n  if (len >= padding) str = str.substr(0, padding);\n  else str = str.padEnd(padding, nbsp);\n  return `${str}`;\n}\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n/** add a color to the PROMPT_DICT for a particular PREFIX */\nfunction m_SetPromptColors(match, color = DEFAULT_COLOR) {\n  if (typeof match !== 'string') throw Error('match prompt must be string');\n  match = match.trim();\n  if (match === '') throw Error('match prompt cannot be empty');\n  let colorTable = IS_NODE ? TERM_COLORS : CSS_COLORS;\n  let validColor = false;\n  validColor = colorTable[color] !== undefined;\n  if (!validColor) colorTable = IS_NODE ? CSS_COLORS : TERM_COLORS;\n  validColor = colorTable[color] !== undefined;\n  if (!validColor)\n    throw Error(`prompt color ${color} is not defined in either table`);\n  // turn on color prompt\n  PROMPT_DICT[match] = [true, color];\n  return colorTable;\n}\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n/** Based on current detected enviroment, return either ANSI terminal or\n *  css based color markers for use in debugging messages. If tagColor is\n *  defined and corresponds to color definition, it is used to set the color.\n *  This is so users can set their own color prompts without editing\n *  PROMPTS_DICT structure.\n */\nfunction m_GetEnvColor(prompt, tagColor) {\n  const colorTable = m_SetPromptColors(prompt, tagColor);\n  const [dbg_mode, defcol] = PROMPT_DICT[prompt.trim()] || [SHOW, DEFAULT_COLOR];\n  const ucolor = colorTable[tagColor];\n  const dcolor = colorTable[defcol];\n  const color = ucolor || dcolor;\n  const reset = colorTable.Reset;\n  return [dbg_mode, color, reset];\n}\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n/** Returns an array suitable for destructuring inside console.log() in\n *  either Node or the browser with color\n */\nfunction m_MakeColorArray(prompt, colorName) {\n  const [dbg, color, reset] = m_GetEnvColor(prompt, colorName);\n  // return empty array if debugging disabled in browser\n  // or debugging is enabled but it's node (de morgan's law)\n  if (!(dbg || IS_NODE)) return [];\n  return IS_NODE\n    ? [`${color}${padString(prompt)}${reset}   `] // server\n    : [`%c${padString(prompt)}%c `, color, reset]; // browser\n}\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n/** Returns an environment-specific color wrapper function suitable for use\n *  in debug output. Use m_MakeColorArray() for browser output.\n */\nfunction m_MakeColorPromptFunction(prompt, colorName, opt = {}) {\n  const textColor = opt.color || 'Reset';\n  const dim = opt.dim || false;\n  return IS_NODE\n    ? (str, ...args) => {\n        if (args === undefined) args = '';\n        let TAG = TERM_COLORS[colorName];\n        let TEXT = TERM_COLORS[textColor];\n        let RST = TERM_COLORS.Reset;\n        let PR = padString(prompt);\n        if (dim) TEXT += TERM_COLORS.Dim;\n        console.log(`${RST}${TAG}${PR}${RST}${TEXT}    ${str}`, ...args);\n      }\n    : (str, ...args) => {\n        if (args === undefined) args = '';\n        let TEXT = TERM_COLORS[textColor];\n        let RST = CSS_COLORS.Reset;\n        let PR = padString(prompt);\n        console.log(`%c${PR}%c%c ${str}`, RST, TEXT, ...args);\n      };\n}\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\nfunction m_GetDivText(id) {\n  const el = document.getElementById(id);\n  if (!el) {\n    console.log(`GetDivText: element ${id} does not exist`);\n    return undefined;\n  }\n  const text = el.textContent;\n  if (text === undefined) {\n    console.log(`HTMLTextOut: element ${id} does not have textContent`);\n    return {};\n  }\n  el.style.whiteSpace = 'pre';\n  el.style.fontFamily = 'monospace';\n  return { element: el, text };\n}\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\nfunction m_HTMLTextJumpRow(row, lineBuffer, id) {\n  const { element, text } = m_GetDivText(id);\n  if (text === undefined) return lineBuffer;\n  // convert content to line buffer\n  if (lineBuffer.length === 0) {\n    console.log(`initializing linebuffer from element id='${id}'`);\n    lineBuffer = text.split('\\n'); // creates a NEW array\n  }\n  // handle line underflow in buffer if row exceeds line buffer\n  if (row > lineBuffer.length - 1) {\n    const count = row + 1 - lineBuffer.length;\n    for (let i = count; i > 0; i--) lineBuffer.push('');\n  }\n  return lineBuffer;\n}\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\nfunction m_HTMLTextPrint(str = '', lineBuffer, id) {\n  const { element, text } = m_GetDivText(id);\n  if (!text) return lineBuffer;\n  // append text\n  lineBuffer.push(str);\n  element.textContent = lineBuffer.join('\\n');\n  return lineBuffer;\n}\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n/** Function to modify the text area of a passed HTML element. Always return\n *  lineBuffer so we can reassign the reference, as the array often changes.\n */\nfunction m_HTMLTextPlot(str = '', lineBuffer, id, row = 0, col = 0) {\n  const { element, text } = m_GetDivText(id);\n  if (!element) return lineBuffer;\n  if (text === undefined) {\n    console.log(`HTMLTextOut: element ${id} does not have textContent`);\n    return lineBuffer;\n  }\n  // ensure row exists\n  lineBuffer = m_HTMLTextJumpRow(row, lineBuffer, id);\n  // fetch line\n  let line = lineBuffer[row];\n  if (line === undefined) {\n    console.log(`HTMLTextOut: unexpected line error for line ${row}`);\n    return lineBuffer;\n  }\n  // handle column underflow in line if col exceeds line length\n  if (col + str.length > line.length + str.length) {\n    for (let i = 0; i < col + str.length - line.length; i++) line += ' ';\n  }\n  // insert str into line\n  let p1 = line.substr(0, col);\n  let p3 = line.substr(col + str.length, line.length - (col + str.length));\n  lineBuffer[row] = `${p1}${str}${p3}`;\n  // write buffer back out\n  element.textContent = lineBuffer.join('\\n');\n  return lineBuffer;\n}\n\n/// API METHODS ///////////////////////////////////////////////////////////////\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n/** Return a function that will prompt strings for you. The function will\n *  returns an array to destructure into console.log(). This is supported\n *  in Chrome and Safari (somewhat), but not in Firefox as of last testing.\n *\n *  To create the function, provide a short PROMPT. This will be color coded\n *  according to the PROMPTS_DICT table, or gray otherwise. You can turn off the\n *  debug output for all PROMPTS in a category also for centralized debug\n *  statement control.\n *\n *  The prompt function accepts a string followed by any number of parameters.\n *  It returns an array of values that are destructured inside of console.log()\n *    const promptFunction = makeLoginHelper('APP');\n *    console.log(...promptFunction('huzzah'));\n *\n *  NOTE: This doesn't work as expected on NodeJS, because empty arrays\n *  render as linefeeds so we just output it regardless. If you want to\n *  disable output, use the makeTerminalOut() function instead.\n */\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n/** allow modification of the PROMPT_DICT\n */\nfunction makeStyleFormatter(prompt, tagColor) {\n  if (prompt.startsWith('UR') && tagColor === undefined) tagColor = 'TagUR';\n  let outArray = m_MakeColorArray(prompt, tagColor);\n  if (outArray.length === 0) return () => [];\n  if (IS_MOBILE) outArray = [`${prompt}:`];\n  const f = (str, ...args) => [...outArray, str, ...args];\n  f._ = `\\n${DEFAULT_SPACE}`;\n  return f;\n}\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n/** return an array that can be spread like console.log(...arr) */\nfunction makeErrorFormatter(pr = '') {\n  const bg = 'rgba(255,0,0,1)';\n  const bga = 'rgba(255,0,0,0.15)';\n  pr = `ERROR ${pr}`.trim();\n  return (str, ...args) => [\n    `%c${pr}%c${str}`,\n    `color:#fff;background-color:${bg};padding:3px 7px 3px 10px;border-radius:10px 0 0 10px;`,\n    `color:${bg};background-color:${bga};padding:3px 5px;`,\n    ...args\n  ];\n}\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n/** return an array that can be spread like console.log(...arr) */\nfunction makeWarningFormatter(pr = '') {\n  const bg = 'rgba(255,150,0,1)';\n  const bga = 'rgba(255,150,0,0.15)';\n  pr = `WARN ${pr}`.trim();\n  return (str, ...args) => [\n    `%c${pr}%c${str}`,\n    `color:#fff;background-color:${bg};padding:3px 7px 3px 10px;border-radius:10px 0 0 10px;`,\n    `color:${bg};background-color:${bga};padding:3px 5px;`,\n    ...args\n  ];\n}\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n/** use like console.log(...debugFormatter('prompt'), 'la la la'); */\nfunction dbgPrint(pr, bg = 'MediumVioletRed') {\n  return [\n    `%c${pr}%c`,\n    `color:#fff;background-color:${bg};padding:3px 10px;border-radius:10px;`,\n    'color:auto;background-color:auto'\n  ];\n}\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\nfunction colorTagString(str, tagColor) {\n  return m_MakeColorArray(str, tagColor);\n}\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n/** Return function to directly print to console instead of returning an array.\n *  This works better for NodeJS since the empty [] still results in output\n *  unlike the browser. Use makeStyleFormatter for browsers\n */\nfunction makeTerminalOut(prompt, tagColor = DEFAULT_COLOR) {\n  const wrap = m_MakeColorPromptFunction(prompt, tagColor);\n  wrap.warn = m_MakeColorPromptFunction(prompt, 'TagYellow', { color: 'Yellow' });\n  wrap.error = m_MakeColorPromptFunction(prompt, 'TagRed', { color: 'Red' });\n  wrap.info = m_MakeColorPromptFunction(prompt, 'TagGray', { dim: true });\n  wrap.DIM = '\\x1b[2m'; // dim text\n  wrap.BRI = '\\x1b[1m'; // bright text\n  wrap.RST = '\\x1b[0m'; // reset text\n  return wrap;\n}\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n/** Return function to print a string, given a DIV id and optional row/column.\n */\nfunction makeHTMLConsole(divId, row = 0, col = 0) {\n  const ERP = makeStyleFormatter('makeHTMLConsole', 'Red');\n  let buffer = [];\n  if (typeof divId !== 'string') throw Error('bad id');\n  if (!document.getElementById(divId)) {\n    console.warn(...ERP(`id '${divId}' doesn't exist`));\n    return {\n      print: () => {},\n      plot: () => {},\n      clear: () => {},\n      gotoRow: () => {}\n    };\n  }\n  let hcon;\n  if (HTCONSOLES[divId]) {\n    hcon = HTCONSOLES[divId];\n  } else {\n    hcon = {\n      buffer: [],\n      plot: (str, y = row, x = col) => {\n        buffer = m_HTMLTextPlot(str, buffer, divId, y, x);\n      },\n      print: str => {\n        buffer = m_HTMLTextPrint(str, buffer, divId);\n      },\n      clear: (startRow = 0, endRow = buffer.length) => {\n        buffer.splice(startRow, endRow);\n      },\n      gotoRow: row => {\n        buffer = m_HTMLTextJumpRow(row, buffer, divId);\n      }\n    };\n    HTCONSOLES[divId] = hcon;\n  }\n  return hcon;\n}\n\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n/** Print all Tag Colors\n */\nfunction printTagColors() {\n  const colortable = IS_NODE ? TERM_COLORS : CSS_COLORS;\n  const colors = Object.keys(colortable).filter(element => element.includes('Tag'));\n  const reset = colortable.Reset;\n  const out = 'dbg_colors';\n  if (!IS_NODE) console.groupCollapsed(out);\n  colors.forEach(key => {\n    const color = colortable[key];\n    const items = IS_NODE\n      ? [`${padString(out)} - (node) ${color}${key}${reset}`]\n      : [`(browser) %c${key}%c`, color, reset];\n    console.log(...items);\n  });\n  if (!IS_NODE) console.groupEnd();\n}\n\n/// MODULE EXPORTS ////////////////////////////////////////////////////////////\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\nmodule.exports = {\n  TERM: TERM_COLORS,\n  CSS: CSS_COLORS,\n  padString,\n  makeStyleFormatter,\n  makeErrorFormatter,\n  makeWarningFormatter,\n  dbgPrint,\n  makeTerminalOut,\n  makeHTMLConsole,\n  printTagColors,\n  colorTagString\n};\n", "/*///////////////////////////////// ABOUT \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\*\\\n\n  entrypoint for client\n\n  when making live changes, make sure that the ur builder is also running and\n  users of this library are watching for changes to the ur library\n\n\\*\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ * /////////////////////////////////////*/\n\n// note: cjs-style modules in 'common' can not be destructured on import\nimport PROMPTS from '../common/prompts.js';\nconst { makeStyleFormatter } = PROMPTS;\n\n/// CONSTANTS & DECLARATIONS //////////////////////////////////////////////////\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\nconst PR = makeStyleFormatter('UR', 'TagCyan');\n\n/// TEST METHODS //////////////////////////////////////////////////////////////\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\nfunction ClientTest(): void {\n  console.log(...PR('System Integration of new URSYS module successful!'));\n  // console.log(...PR('@ursys/core integration...works?'));\n}\n\n/// EXPORTS ///////////////////////////////////////////////////////////////////\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\nexport {\n  makeStyleFormatter as ConsoleStyler, // style formatter for browser\n  ClientTest\n};\n"],
  "mappings": "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",
  "names": ["module", "module", "PR", "makeStyleFormatter", "row", "PROMPTS"]
}
